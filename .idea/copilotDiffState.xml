<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/split_chunk.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/split_chunk.py" />
              <option name="originalContent" value="from astchunk import ASTChunkBuilder&#10;&#10;# Your source code&#10;code = &quot;&quot;&quot;&#10;def fibonacci(n):&#10;    if n &lt;= 1:&#10;        return n&#10;    return fibonacci(n-1) + fibonacci(n-2)&#10;&#10;class Calculator:&#10;    def add(self, a, b):&#10;        return a + b&#10;&#10;    def multiply(self, a, b):&#10;        return a * b&#10;&quot;&quot;&quot;&#10;&#10;# Initialize the chunk builder&#10;configs = {&#10;    &quot;max_chunk_size&quot;: 100,  # Maximum non-whitespace characters per chunk&#10;    &quot;language&quot;: &quot;python&quot;,  # Supported: python, java, csharp, typescript&#10;    &quot;metadata_template&quot;: &quot;default&quot;  # Metadata format for output&#10;}&#10;chunk_builder = ASTChunkBuilder(**configs)&#10;&#10;# Create chunks&#10;chunks = chunk_builder.chunkify(code)&#10;&#10;# Each chunk contains content and metadata&#10;for i, chunk in enumerate(chunks):&#10;    print(f&quot;[Chunk {i + 1}]&quot;)&#10;    print(f&quot;{chunk['content']}&quot;)&#10;    print(f&quot;Metadata: {chunk['metadata']}&quot;)&#10;    print(&quot;-&quot; * 50)" />
              <option name="updatedContent" value="import os&#10;from astchunk import ASTChunkBuilder&#10;&#10;def chunk_python_files_in_directory(directory_path):&#10;    configs = {&#10;        &quot;max_chunk_size&quot;: 100,  # Maximum non-whitespace characters per chunk&#10;        &quot;language&quot;: &quot;python&quot;,  # Supported: python, java, csharp, typescript&#10;        &quot;metadata_template&quot;: &quot;default&quot;  # Metadata format for output&#10;    }&#10;    chunk_builder = ASTChunkBuilder(**configs)&#10;&#10;    for root, _, files in os.walk(directory_path):&#10;        for file in files:&#10;            if file.endswith('.py'):&#10;                file_path = os.path.join(root, file)&#10;                with open(file_path, 'r', encoding='utf-8') as f:&#10;                    code = f.read()&#10;                print(f&quot;\n=== File: {file_path} ===&quot;)&#10;                chunks = chunk_builder.chunkify(code)&#10;                for i, chunk in enumerate(chunks):&#10;                    print(f&quot;[Chunk {i + 1}]&quot;)&#10;                    print(f&quot;{chunk['content']}&quot;)&#10;                    print(f&quot;Metadata: {chunk['metadata']}&quot;)&#10;                    print(&quot;-&quot; * 50)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    import sys&#10;    if len(sys.argv) != 2:&#10;        print(&quot;Usage: python split_chunk.py &lt;directory_path&gt;&quot;)&#10;    else:&#10;        chunk_python_files_in_directory(sys.argv[1])" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>