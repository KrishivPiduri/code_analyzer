<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/split_chunk.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/split_chunk.py" />
              <option name="originalContent" value="import os&#10;from astchunk import ASTChunkBuilder&#10;&#10;def chunk_python_files_in_directory(directory_path):&#10;    configs = {&#10;        &quot;max_chunk_size&quot;: 100,  # Maximum non-whitespace characters per chunk&#10;        &quot;language&quot;: &quot;python&quot;,  # Supported: python, java, csharp, typescript&#10;        &quot;metadata_template&quot;: &quot;default&quot;  # Metadata format for output&#10;    }&#10;    chunk_builder = ASTChunkBuilder(**configs)&#10;&#10;    for root, _, files in os.walk(directory_path):&#10;        for file in files:&#10;            if file.endswith('.py'):&#10;                file_path = os.path.join(root, file)&#10;                with open(file_path, 'r', encoding='utf-8') as f:&#10;                    code = f.read()&#10;                print(f&quot;\n=== File: {file_path} ===&quot;)&#10;                chunks = chunk_builder.chunkify(code)&#10;                for i, chunk in enumerate(chunks):&#10;                    print(f&quot;[Chunk {i + 1}]&quot;)&#10;                    print(f&quot;{chunk['content']}&quot;)&#10;                    print(f&quot;Metadata: {chunk['metadata']}&quot;)&#10;                    print(&quot;-&quot; * 50)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    chunk_python_files_in_directory(&quot;url-shortener&quot;)&#10;" />
              <option name="updatedContent" value="import os&#10;import json&#10;from astchunk import ASTChunkBuilder&#10;&#10;def chunk_python_files_in_directory(directory_path, output_json_path):&#10;    configs = {&#10;        &quot;max_chunk_size&quot;: 100,  # Maximum non-whitespace characters per chunk&#10;        &quot;language&quot;: &quot;python&quot;,  # Supported: python, java, csharp, typescript&#10;        &quot;metadata_template&quot;: &quot;default&quot;  # Metadata format for output&#10;    }&#10;    chunk_builder = ASTChunkBuilder(**configs)&#10;    all_chunks = []&#10;&#10;    for root, _, files in os.walk(directory_path):&#10;        for file in files:&#10;            if file.endswith('.py'):&#10;                file_path = os.path.join(root, file)&#10;                with open(file_path, 'r', encoding='utf-8') as f:&#10;                    code = f.read()&#10;                chunks = chunk_builder.chunkify(code)&#10;                for i, chunk in enumerate(chunks):&#10;                    all_chunks.append({&#10;                        'file': file_path,&#10;                        'chunk_index': i + 1,&#10;                        'content': chunk['content'],&#10;                        'metadata': chunk['metadata'],&#10;                        'raw_code': code&#10;                    })&#10;    with open(output_json_path, 'w', encoding='utf-8') as out_f:&#10;        json.dump(all_chunks, out_f, indent=2, ensure_ascii=False)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    chunk_python_files_in_directory(&quot;url-shortener&quot;, &quot;chunks_output.json&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>